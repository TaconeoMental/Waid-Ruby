LETRA            = "A" ... "Z"
                 | "a" ... "z"
                 | "_"
DIGITO_DECIMAL   = "0" ... "9";

IDENTIFICADOR    = LETRA, {LETRA | DIGITO_DECIMAL};
LISTA_IDS        = IDENTIFICADOR, {",", IDENTIFICADOR};

LITERAL_ENTERO   = (DIGITO_DECIMAL - "0"), {DIGITO_DECIMAL};
LITERAL_FLOAT    = DECIMALES, ".", DECIMALES;
DECIMALES        = DIGITO_DECIMAL, {DIGITO_DECIMAL};
LITERAL          = LITERAL_ENTERO
                 | LITERAL_FLOAT;
   
OPERANDO         = LITERAL
                 | "(", EXPR, ")";
                
LISTA_STMTS      = {ESTAMENTO};
LISTA_EXPR       = EXPR, {",", EXPR};

EXPR             = EXPR_BOOL_OR;
EXPR_BOOL_OR     = EXPR_BOOL_AND, {"or", EXPR_BOOL_AND};
EXPR_BOOL_AND    = EXPR_BOOL_NEG, {"and", EXPR_BOOL_NEG};
EXPR_BOOL_NEG    = "not", EXPR_BOOL_NEG
                 | EXPR_COMP;

EXPR_COMP        = RELATIONAL, {OP_EQUALITY, RELATIONAL};
OP_EQUALITY      = "="
                 | "/=";
RELATIONAL       = EXPR_ARITMETICA, {OP_RELATIONAL, EXPR_ARITMETICA};
OP_RELATIONAL    = ">"
                 | "<"
                 | ">="
                 | "<=";

EXPR_ARITMETICA  = MULT, {OP_SUMA, MULT};
OP_SUMA          = "+"
                 | "-";
MULT             = NEG, {OP_MULT, NEG};
OP_MULT          = "*"
                 | "/"
                 | "%";
NEG              = "-", NEG
                 | EXPR_PRIMARIA


# EXPR_PRIMARIA    = EXPR_PRIMARIA, ["'", IDENTIFICADOR]
#                  | OPERANDO
#                  | FUNC_CALL
#                  | RECORD_INIT;
#
# Aquí tendríamos recursión por la izquierda y nuestro parser no puede procesar
# estas gramáticas. Para eso utilizaremos lo siguiente:
#
# A -> AB | C1 | C2 | C3 | C4...
# => A  -> C1A' | C2A' | C3A' | C4A'...
#    A' -> BA' | ε
#
# De esta forma conservamos la gramática y eliminamos la recursión por la
# izquierda :)
# Lo malo es que nos va a quedar una gramática media fea. Pero lo vale,
# supongo.
# Quedaría así:
EXPR_PRIMARIA    = OPERANDO, EXPR_PRIMARIA_P
                 | FUNC_CALL, EXPR_PRIMARIA_P
                 | RECORD_INIT, EXPR_PRIMARIA_P
EXPR_PRIMARIA_P  = "'", IDENTIFICADOR, EXPR_PRIMARIA_P
                 | ε
             
RECORD_INIT      = "!", "{", IDENTIFICADOR, [LISTA_EXPR], "}";
                 | "!", IDENTIFICADOR;

FUNC_CALL        = "!", "(", IDENTIFICADOR, [LISTA_EXPR], ")";
                 | "!", IDENTIFICADOR;

DECL_RECORD      = DECL_TIPO, "record", "=>", CUERPO_RECORD;
CUERPO_RECORD    = [DECL_VARIABLE], "endrc"

TIPO_FUNC        = "func", PARAMETROS;
PARAMETROS       = "(", [LISTA_PARAMS], ")";
LISTA_PARAMS     = PARAM_DECL, {",", PARAM_DECL};
PARAM_DECL       = IDENTIFICADOR, [VALOR_DEFECTO];
VALOR_DEFECTO    = "=>", OPERANDO;

DECL_FUNC        = DECL_TIPO, TIPO_FUNC, CUERPO_FUNC;
CUERPO_FUNC      = "=>", LISTA_STMTS, "endfn";
DECL_TIPO        = IDENTIFICADOR, ":";

DECL_VARIABLE    = IDENTIFICADOR, "=>", EXPR;

IF_STMT          = "if", EXPR, ":", LISTA_STMTS, [ELIF_BLOCK], "endif";
ELIF_BLOCK       = "else", ":", LISTA_STMTS;

WHILE_STMT       = "while", EXPR, WHILE_BODY, ":", LISTA_STMTS, "endwl";

RETURN_STMTS     = "<-", EXPR;

INCLUDE_STMT     = "include", """, {}, """

ESTAMENTO        = DECL_VARIABLE
                 | DECL_FUNC
                 | DECL_RECORD
                 | RETURN_STMT
                 | IF_STMT
                 | WHILE_STMT
                 | INCLUDE_STMT
                 | EXPR;
PROGRAMA         = {LISTA_STMTS};
