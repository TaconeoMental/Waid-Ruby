join: func(arr) =>
    l => !(length arr)
    count => 0

    new_str => ""
    while count < l:
        new_str => new_str . (count@arr)
        count => count + 1
    endwl
    <- new_str
endfn

in: func(elem, str) =>
    l => !(length str)
    count => 0
    while count < l:
        if elem == count@str:
            <- count
        endif
        count => count + 1
    endwl
    <- null
endfn

lower: func(str) =>
    upper_case => "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    lower_case => "abcdefghijklmnopqrstuvwxyz"

    l => !(length str)
    count => 0

    new_str => ""
    while count < l:
        pos => !(in count@str upper_case) 
        if pos:
            new_str => new_str . (pos@lower_case)
        else:
            new_str => new_str . (count@str)
        endif
        count => count + 1
    endwl
    <- new_str
endfn

make_rot_alph: func(num) =>
    lower_case => "abcdefghijklmnopqrstuvwxyz"
    new_str => []
    
    ind => num
    curr_index => 0

    while ind < 26:
        (curr_index@new_str) =>  ind@lower_case
        curr_index => curr_index + 1
        ind => ind + 1
    endwl

    ind => 0
    while ind < num:
        (curr_index@new_str) => ind@lower_case
        ind => ind + 1
        curr_index => curr_index + 1
    endwl
    <- !(join new_str)
endfn

make_rot: func(num) =>
    rot: func(str) =>
        str => !(lower str)
        alphabet => "abcdefghijklmnopqrstuvwxyz"
        rot_alph => !(make_rot_alph num % 26)

        len => !(length str)
        count => 0

        new_str => ""
        while count < len:
            char => count@str
            if not !(in char alphabet):
                new_str => new_str . char
            else:
                letter_index => !(in count@str alphabet)
                new_str => new_str . (letter_index@rot_alph)
            endif
            count => count + 1
        endwl
        <- new_str
    endfn
endfn

main: func() =>
    !(print "Ingresa un texto: ")
    texto => !input

    !(print "Ingresa un nÃºmero: ")
    num_rot => !(toNum !input)

    rotn => !(make_rot num_rot)
    !(printLine "Texto cifrado: " . !(rotn texto))
endfn

!main
