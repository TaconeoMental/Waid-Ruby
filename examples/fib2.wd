include "io"

fib_rec: func(n) =>
    if n < 2:
        <- n
    endif
    <- !(fib_rec n - 1) + !(fib_rec n - 2)
endfn

fib_while: func(n) =>
    a => 0
    b => 1
    count => 0
    while count < n, count => count + 1:
        prev_a => a
        a => b
        b => prev_a + b
    endwl
    <- a
endfn

fib_dp: func(n) =>
    fibs => [0, 1]
    count => 2
    while count <= n, count => count + 1:
        fibs => fibs . ((count - 1)@fibs + (count - 2)@fibs)
    endwl
    <- n @ fibs
endfn

main: func() =>
    num => !(toNum !io::input)
    count => 0
    !(io::printLine "Iterative Fibonacci:")
    while count < num, count => count + 1:
        !(io::print !(fib_while count))
        !(io::print " ")
    endwl

    !(io::printLine "")

    count => 0
    !(io::printLine "DP Fibonacci:")
    while count < num, count => count + 1:
        !(io::print !(fib_dp count))
        !(io::print " ")
    endwl

    !(io::printLine "")

    count => 0
    !(io::printLine "Recursive Fibonacci:")
    while count < num, count => count + 1:
        !(io::print !(fib_rec count))
        !(io::print " ")
    endwl
    !(io::printLine "")
endfn

!main
