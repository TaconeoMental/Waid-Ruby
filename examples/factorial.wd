factorial_while: func(n) =>
    fact => 1
    while n > 0 =>
        # Todavía no sé cómo implementar estos operadores
        #fact *> n
        #n -> 1
        fact => fact * n
        n => n - 1
    endwl
    <- fact
endfn

factorial_rec: func(n) =>
    if n == 1 =>
        <- n
    endif
    <- n * !(factorial_rec n - 1)
endfn

# Con las características actuales del lenguaje no podemos hacer esta :(
#factorial_dp: func(n) =>
#    arr = []
#    if n in arr =>
#        <- arr @ n
#    elif n == 0 or n == 1 =>
#        arr @ n => 1
#        <- 1
#    else =>
#        fact => n * !(factorial_dp n - 1)
#        n @ array => fact
#    endif
#    <- fact
#endfn

equal: func(x, y, z) =>
    <- x == y and y == z
endfn

main: func() =>
    num => 10
    #if !equal(!(factorial_while num) !(factorial_rec num) !(factorial_dp num)) =>
    !(printLine !(factorial_while num) == !(factorial_rec num))
endfn

!main
